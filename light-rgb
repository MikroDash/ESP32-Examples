/*
 Ejemplo del canal de Youtube "MikroTutoriales"
 https://www.youtube.com/c/Mikrotutoriales16/videos
 
 Utilizando el broker MQTT de mqtt.mikrodash.com
 y la plataforma de https://app.mikrodash.com
 para crear una dashboard personalizada
*/

#include <PubSubClient.h> // Biblioteca para la comunicación MQTT
#include <Adafruit_NeoPixel.h> // Biblioteca para controlar los LEDs NeoPixel

// Detección del módulo ESP para incluir las bibliotecas WiFi correspondientes
#if defined(ESP8266)
#include <ESP8266WiFi.h>
#elif defined(ESP32)
#include <WiFi.h>
#else
#error "This program only works for ESP32 and ESP8266 modules"
#endif

// Configuración de la red WiFi
const char* ssid = "your_wifi_ssid"; // Nombre de la red WiFi
const char* password = "your_wifi_password"; // Contraseña de la red WiFi

// Configuración del servidor MQTT
const char* mqtt_server = "mqtt.mikrodash.com";
const int mqtt_port = 1883;
const char* mqtt_username = "your_mikrodash_username"; // Usuario de MikroDash
const char* mqtt_password = "your_mikrodash_password"; // Contraseña de MikroDash

// Tópicos MQTT para la suscripción
const char* mqtt_topic_value = "your_mikrodash_account/luz_color/value";
const char* mqtt_topic_percent = "your_mikrodash_account/luz_color/percent";
const char* mqtt_topic_color = "your_mikrodash_account/luz_color/color/hex";

WiFiClient espClient;
PubSubClient client(espClient);

// Configuración de pines y número de LEDs
#if defined(ESP32) || defined(ESP8266)
#define PIN 5 // Pin utilizado para controlar la tira de LEDs
#endif
#define NUM_LEDS 16 // Cantidad de LEDs en la tira

// Inicialización de la tira de LEDs
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, PIN, NEO_GRB + NEO_KHZ800);

// Variables globales para el estado de los LEDs
int percent = 50; // Porcentaje de brillo
String hexaColor = "#FFFFFF"; // Color inicial en formato hexadecimal
bool status = true; // Estado de encendido/apagado de los LEDs

// Estructura para almacenar los valores RGB
struct RGB {
  uint8_t red;
  uint8_t green;
  uint8_t blue;
};

void setup() {
  Serial.begin(115200);
  delay(10);

  strip.begin(); // Inicializa la tira de LEDs
  strip.show(); // Apaga todos los LEDs al inicio

  connectWiFi(); // Conecta a la red WiFi
  connectMQTT(); // Establece conexión con el servidor MQTT
}

// Función para conectar a la red WiFi
void connectWiFi() {
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
}

// Función para conectar al servidor MQTT
void connectMQTT() {
  client.setServer(mqtt_server, mqtt_port);
  while (!client.connected()) {
    if (client.connect("ESP32Client", mqtt_username, mqtt_password)) {
      Serial.println("Connected to MQTT server with authentication");
      // Suscripción a los tópicos MQTT
      client.setCallback(callback);
      client.subscribe(mqtt_topic_value);
      client.subscribe(mqtt_topic_percent);
      client.subscribe(mqtt_topic_color);
    } else {
      Serial.println("MQTT connection error, retrying in 5 seconds");
      delay(5000);
    }
  }
}

// Callback para recibir mensajes MQTT
void callback(char* topic, byte* payload, unsigned int length) {
  String payloadStr;
  for (int i = 0; i < length; i++) {
    payloadStr += (char)payload[i];
  }

  Serial.print("Message received on topic: ");
  Serial.println(topic);
  Serial.println(payloadStr);

  // Procesa los mensajes según el tópico
  if (strcmp(topic, mqtt_topic_value) == 0) {
    status = (payloadStr == "true" || payloadStr == "1");
    OnUpdatesBulb();
  } else if (strcmp(topic, mqtt_topic_percent) == 0) {
    percent = payloadStr.toInt();
    OnUpdatesBulb();
  } else if (strcmp(topic, mqtt_topic_color) == 0) {
    hexaColor = payloadStr;
    OnUpdatesBulb();
  }
}

void loop() {
  if (!client.connected()) {
    connectMQTT(); // Reintentar conexión MQTT si se pierde
  }
  client.loop(); // Mantener la conexión MQTT activa
  delay(1); // Pequeño delay para estabilizar el loop
}

// Función para actualizar el estado de los LEDs
void OnUpdatesBulb(){
  if(!status){
    strip.clear(); // Apaga todos los LEDs si el estado es false
    strip.show();
    return;
  }
  // Convierte el porcentaje de brillo a un valor entre 0 y 255
  uint8_t brightness = round(percent * 255 / 100);
  strip.setBrightness(brightness);

  // Convierte el color hexadecimal a valores RGB
  RGB rgbColor = hexToRgb();
  uint32_t color = strip.Color(rgbColor.red, rgbColor.green, rgbColor.blue);
  for(int led = 0; led < NUM_LEDS; led++){
    strip.setPixelColor(led, color); // Aplica el color a cada LED
  }
  strip.show(); // Actualiza los LEDs con los nuevos colores
}

// Función para convertir el valor hexadecimal a RGB
RGB hexToRgb() {
  RGB color;
  hexaColor.replace("#", ""); // Elimina el símbolo "#"
  hexaColor.replace("\"", ""); // Elimina las comillas dobles

  if (hexaColor.length() == 6) {
    long number = strtol(hexaColor.c_str(), NULL, 16); // Convierte de hex a decimal
    color.red = number >> 16;
    color.green = (number >> 8) & 0xFF;
    color.blue = number & 0xFF;
  } else {
    color.red = 0; color.green = 0; color.blue = 0; // En caso de error
  }
  return color;
}
