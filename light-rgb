/*
 Ejemplo del canal de Youtube "MikroTutoriales"
 https://www.youtube.com/c/Mikrotutoriales16/videos
 
 Utilizando el broker MQTT de mqtt.mikrodash.com
 y la plataforma de https://app.mikrodash.com
 para crear una dashboard personalizada
*/

//Librerias para MQTT y lectura de JSON
#include <PubSubClient.h> //https://github.com/knolleary/pubsubclient
#include <Arduino_JSON.h> //https://github.com/arduino-libraries/Arduino_JSON
//Libreria para los LEDS
#include <Adafruit_NeoPixel.h> //https://github.com/adafruit/Adafruit_NeoPixel
#include <math.h>
//Libreria para Modulo de WiFi
#if defined(ESP8266)
#include <ESP8266WiFi.h>  //https://github.com/esp8266/Arduino
#elif defined(ESP32)
#include <WiFi.h>
#else
#error "El programa solo funciona para los modulos ESP32 y ESP8266"
#endif

//El pin utilizado para el ESP32
#if defined(ESP32)
#define PIN 5
#elif defined(ESP8266)
#define PIN 16
#endif

//La cantidad de LEDS WS2812
#define NUM_LEDS 16

//Se aplica la configuracion que necesita el WS2812 y se le indica el numero de LEDS
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, PIN, NEO_GRB + NEO_KHZ800);

// Constantes de configuracion
const char* ssid = "tuwifi"; // Nombre de la Red Wi-Fi
const char* password = "tucontraseniawifi"; // Contraseña de la Red Wi-Fi

//Parametros de conexion MQTT con MikroDash
const char* mqtt_server = "mqtt.mikrodash.com"; //Servidor MQTT
const int mqtt_port = 1883;                     //Puerto MQTT
const int qos_level=1;                          //Calidad del servicio MQTT

//Credenciales MQTT MikroDash
const char* usernameMQTT = "usernameMQTT";
const char* passwordMQTT = "passwordMQTT";

//Topics MQTT
const char* topic_mqtt_ws2812 = "topiclampara";

//Variables para la conexión y envio de mensajes MQTT
WiFiClient espClient;
PubSubClient client(espClient);
#define MSG_BUFFER_SIZE  (150)
char msg[MSG_BUFFER_SIZE];

/*
  * Conexion Wi-Fi
*/
void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Conectando a ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi Conectado");
  Serial.println("Direccion IP: ");
  Serial.println(WiFi.localIP());
}

/*
  * Funcion para reconectar a MQTT
*/
void reconnect() {
  while (!client.connected()) {
    Serial.print("Conectando al broker MQTT...");
    // Se genera un ID aleatorio con
    String clientId = "MikroDashWiFiClient-";
    clientId += String(random(0xffff), HEX);

    //Cuando se conecta
    if (client.connect(clientId.c_str(), usernameMQTT, passwordMQTT) ) {
      Serial.println("Conectado");

      //Topics a los que se suscribira para recibir cambios
      client.subscribe(topic_mqtt_ws2812, qos_level);
    } else {
      Serial.print("Error al conectar: ");
      Serial.print(client.state());
      Serial.println(" Reintentando en 5 segundos...");
      delay(5000);
    }
  }
}

//Callback para la recepcion de datos en los topic suscrito
void callback(char* topic, byte* payload, unsigned int length) {
  String myString = ""; 
  for (int i = 0; i < length; i++) {
    myString = myString + (char)payload[i]; //Se convierte el payload de tipo bytes a una cadena de texto (String)
  }
  JSONVar myObject = JSON.parse(myString); // Se convierte la respuesta a tipo Object para acceder a los valores por el nombre.
  if (JSON.typeof(myObject) == "undefined") { // Si el archivo no tiene información o no es JSON se sale del callback
    Serial.println("[JSON] JSON NO VALIDO"); 
    return;
  }else{                                      //Si el archivo es JSON y contiene info entra aqui
    const char* from = myObject["from"];
    Serial.println(myObject["value"]);

    if(strcmp(topic, topic_mqtt_ws2812)==0 && strcmp(from,"app")==0 ){  //Si el topic es topic_mqtt_ws2812 y lo envia app.mikrodash.com

      const bool isActive = (bool) myObject["value"]["on"];   //Se asigna el valor de "Value" en una constante de tipo entero
      const int percentValue = (int) myObject["value"]["percent"];   //Se asigna el valor de "Value" en una constante de tipo entero

      const uint8_t redValue = (uint8_t) myObject["value"]["color"]["rgb"]["r"];   //Se asigna el valor de "Value" en una constante de tipo entero
      const uint8_t greenValue = (uint8_t) myObject["value"]["color"]["rgb"]["g"];   //Se asigna el valor de "Value" en una constante de tipo entero
      const uint8_t blueValue = (uint8_t) myObject["value"]["color"]["rgb"]["b"];   //Se asigna el valor de "Value" en una constante de tipo entero

      if(!isActive){
        // Llamar a la función SetColorWS2812() para establecer el color de los LEDs y el brillo
        SetColorWS2812(0, 0, 0, 0);
        //Retorno al servicor que ya establecio los colores en la tira de LEDs WS2812
        snprintf (msg, MSG_BUFFER_SIZE, "{\"from\":\"device\",\"message\":\"Hola desde ESP8266\",\"value\": { \"on\": false, \"percent\": %ld, \"color\": {\"rgb\": {\"r\": %ld, \"g\": %ld, \"b\": %ld }} } }", percentValue, redValue, greenValue, blueValue);  //convierte los parametros en un array de bytes
        client.publish(topic_mqtt_ws2812, msg, true); //Se actualiza el valor actual de la salida PWM
        return;
      }

      if(percentValue >= 0 && percentValue <= 100){
      // Llamar a la función SetColorWS2812() para establecer el color de los LEDs y el brillo
      SetColorWS2812(redValue, greenValue, blueValue, percentValue);
      // retorno al servicor que ya establecio los colores en la tira de LEDs WS2812
      snprintf (msg, MSG_BUFFER_SIZE, "{\"from\":\"device\",\"message\":\"Hola desde ESP8266\",\"value\": { \"on\": true, \"percent\": %ld, \"color\": {\"rgb\": {\"r\": %ld, \"g\": %ld, \"b\": %ld }} } }", percentValue, redValue, greenValue, blueValue);   //convierte los parametros en un array de bytes
      client.publish(topic_mqtt_ws2812, msg, true); //Se actualiza el valor actual de la salida PWM
      }else{
        Serial.println("El porcentaje de brillo deberia ser entre 0 y 100");
      }

    }
  }

}

void setup() {
  Serial.begin(115200);      //Comunicación serial para monitorear

  strip.begin();
  strip.show(); // Inicializar todos los LEDS en apagado

  setup_wifi();               //Se llama la funcición para conectarse al Wi-Fi
  client.setServer(mqtt_server, mqtt_port);  //Se indica el servidor y puerto de MQTT para conectarse
  client.setCallback(callback);  //Se establece el callback, donde se reciben los cambios de las suscripciones MQTT
}

void loop() {
  if (!client.connected()) { //Si se detecta que no hay conexión con el broker 
    reconnect(); //Reintenta la conexión
  }
  client.loop(); //De lo contrario crea un bucle para las suscripciones MQTT
  delay(100); //Un delay de 100ms para darle un respiro al modulo de wifi
}


/*
  **Funcion para aplicar el color y porcentaje de brillo
  *red el valor deber ser entre 0 y 255
  *green el valor deber ser entre 0 y 255
  *blue el valor deber ser entre 0 y 255
  *percent el valor debe ser entre 0 y 100
*/
void SetColorWS2812(uint8_t red, uint8_t green, uint8_t blue, int percent){

  //Convertir Porcentaje en valor de entre 0 y 255 (Regla de 3)
  uint8_t brightness = round(percent * 255 / 100);
  strip.setBrightness(brightness);

  //Se establecen los colores
  uint32_t color = strip.Color(red, green, blue);
  for(int led = 0; led < NUM_LEDS; led++){
    strip.setPixelColor(led, color);
  }
  //Se aplica la nueva configuracion y la muestra en los leds
  strip.show();
}
